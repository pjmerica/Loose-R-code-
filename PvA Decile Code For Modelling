# Load libraries
library(dplyr)
library(openxlsx)
library(rlang)  # for sym()

# Example data (match your structure)
set.seed(42)
df <- data.frame(
  Score = rnorm(1000, 50, 10),
  quality = runif(1000),
  category = sample(LETTERS[1:5], 1000, replace = TRUE),
  Bad_unit = rbinom(1000, 1, 0.2),
  preds = runif(1000)
)

# Function to compute deciles and summaries
compute_feature_deciles <- function(data, feature_col, pred_col = "preds", bad_col = "Bad_unit") {
  # Ensure we're working with strings
  feature_sym <- rlang::sym(feature_col)
  pred_sym <- rlang::sym(pred_col)
  bad_sym <- rlang::sym(bad_col)
  
  data %>%
    dplyr::mutate(decile = dplyr::ntile(!!feature_sym, 10)) %>%
    dplyr::group_by(decile) %>%
    dplyr::summarise(
      avg_preds = mean(!!pred_sym, na.rm = TRUE),
      bad_rate = sum(!!bad_sym, na.rm = TRUE) / dplyr::n(),
      count = dplyr::n(),
      .groups = "drop"
    ) %>%
    dplyr::arrange(decile)
}

# Create workbook
wb <- openxlsx::createWorkbook()
openxlsx::addWorksheet(wb, "Decile Summaries")

# Select numeric features only, excluding 'preds' and 'Bad_unit'
feature_cols <- df %>%
  dplyr::select(where(is.numeric)) %>%
  dplyr::select(-preds, -Bad_unit) %>%
  colnames()

row_pointer <- 1

# Loop through each numeric feature
for (feature in feature_cols) {
  summary_df <- compute_feature_deciles(df, feature)
  
  # Write feature name
  openxlsx::writeData(wb, sheet = 1, x = paste("Feature:", feature), startRow = row_pointer, startCol = 1)
  row_pointer <- row_pointer + 1
  
  # Write summary table
  openxlsx::writeDataTable(wb, sheet = 1, x = summary_df, startRow = row_pointer, startCol = 1)
  
  row_pointer <- row_pointer + nrow(summary_df) + 3
}

# Save workbook
openxlsx::saveWorkbook(wb, "decile_summaries_by_feature.xlsx", overwrite = TRUE)
